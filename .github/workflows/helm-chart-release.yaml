name: Helm Chart Release

on:
  push:
    tags:
      - 'v*'
      - 'release-*'
    paths:
      - 'charts/**'
  pull_request:
    branches:
      - main
    paths:
      - 'charts/**'
  release:
    types: [published]

permissions:
  packages: write
  contents: read

env:
  CHART_PATH: charts
  REGISTRY: docker.io

jobs:
  lint-and-validate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Set up Helm
        uses: azure/setup-helm@v4
        with:
          version: v3.19.0

      - name: Lint chart
        run: |
          set -euo pipefail
          helm lint "${CHART_PATH}" --strict

      - name: Validate chart templates
        run: |
          set -euo pipefail
          helm template test "${CHART_PATH}" > /dev/null

      - name: Extract chart metadata
        id: chart
        run: |
          set -euo pipefail

          CHART_NAME=$(yq eval '.name' "${CHART_PATH}/Chart.yaml")
          CHART_VERSION=$(yq eval '.version' "${CHART_PATH}/Chart.yaml")

          echo "name=${CHART_NAME}" >> "${GITHUB_OUTPUT}"
          echo "version=${CHART_VERSION}" >> "${GITHUB_OUTPUT}"

      - name: Summary
        if: always()
        run: |
          cat >> "${GITHUB_STEP_SUMMARY}" <<EOF
          ## Helm Chart Validation

          **Chart:** ${{ steps.chart.outputs.name }}
          **Version:** ${{ steps.chart.outputs.version }}
          **Status:** ✅ Linting and validation passed
          EOF

  release:
    runs-on: ubuntu-latest
    needs: lint-and-validate
    if: github.event_name == 'push' && github.ref_type == 'tag'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Set up Helm
        uses: azure/setup-helm@v4
        with:
          version: v3.19.0

      - name: Determine version
        id: version
        run: |
          set -euo pipefail

          # Use tag version if available, otherwise use Chart.yaml
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            VERSION="${GITHUB_REF#refs/tags/v}"

            # Validate semantic versioning
            if ! [[ "${VERSION}" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?$ ]]; then
              echo "::error::Invalid version: ${VERSION}"
              exit 1
            fi

            echo "version=${VERSION}" >> "${GITHUB_OUTPUT}"
            echo "from_tag=true" >> "${GITHUB_OUTPUT}"
          else
            VERSION=$(yq eval '.version' "${CHART_PATH}/Chart.yaml")
            echo "version=${VERSION}" >> "${GITHUB_OUTPUT}"
            echo "from_tag=false" >> "${GITHUB_OUTPUT}"
          fi

      - name: Update Chart.yaml with tag version
        if: steps.version.outputs.from_tag == 'true'
        run: |
          set -euo pipefail
          yq eval ".version = \"${{ steps.version.outputs.version }}\"" \
            -i "${CHART_PATH}/Chart.yaml"

      - name: Rename chart package
        run: |
          set -euo pipefail

          ORIGINAL_NAME=$(yq eval '.name' "${CHART_PATH}/Chart.yaml")
          NEW_NAME="${ORIGINAL_NAME}-charts"

          yq eval ".name = \"${NEW_NAME}\"" -i "${CHART_PATH}/Chart.yaml"
          echo "Chart renamed: ${ORIGINAL_NAME} → ${NEW_NAME}"

      - name: Extract chart metadata
        id: chart
        run: |
          set -euo pipefail

          CHART_NAME=$(yq eval '.name' "${CHART_PATH}/Chart.yaml")
          CHART_VERSION=$(yq eval '.version' "${CHART_PATH}/Chart.yaml")

          echo "name=${CHART_NAME}" >> "${GITHUB_OUTPUT}"
          echo "version=${CHART_VERSION}" >> "${GITHUB_OUTPUT}"

      - name: Login to registry
        run: |
          set -euo pipefail
          echo "${{ secrets.DOCKERHUB_TOKEN }}" | \
            helm registry login "${REGISTRY}" \
              --username "${{ secrets.DOCKERHUB_USERNAME }}" \
              --password-stdin

      - name: Package chart
        id: package
        run: |
          set -euo pipefail
          helm package "${CHART_PATH}" \
            --version "${{ steps.chart.outputs.version }}"

          PACKAGE="${{ steps.chart.outputs.name }}-${{ steps.chart.outputs.version }}.tgz"
          echo "file=${PACKAGE}" >> "${GITHUB_OUTPUT}"

      - name: Push chart with version
        run: |
          set -euo pipefail
          helm push "${{ steps.package.outputs.file }}" \
            "oci://${REGISTRY}/${{ github.repository_owner }}"

      - name: Package and push chart as latest
        run: |
          set -euo pipefail

          # Create temporary directory for extraction
          TEMP_DIR=$(mktemp -d)

          # Extract the packaged chart
          tar -xzf "${{ steps.package.outputs.file }}" -C "${TEMP_DIR}"

          # Update version to 'latest' in the extracted chart
          CHART_DIR="${TEMP_DIR}/${{ steps.chart.outputs.name }}"
          yq eval '.version = "latest"' -i "${CHART_DIR}/Chart.yaml"

          # Package with 'latest' version
          helm package "${CHART_DIR}" --version latest --destination .

          # Push the latest version
          LATEST_PACKAGE="${{ steps.chart.outputs.name }}-latest.tgz"
          helm push "${LATEST_PACKAGE}" \
            "oci://${REGISTRY}/${{ github.repository_owner }}"

          # Cleanup
          rm -rf "${TEMP_DIR}" "${LATEST_PACKAGE}"

      - name: Logout from registry
        if: always()
        run: helm registry logout "${REGISTRY}" || true

      - name: Summary
        run: |
          cat >> "${GITHUB_STEP_SUMMARY}" <<EOF
          ## Helm Chart Released

          **Chart:** ${{ steps.chart.outputs.name }}
          **Version:** ${{ steps.chart.outputs.version }}
          **Registry:** ${REGISTRY}/${{ github.repository_owner }}

          ### Install with specific version
          \`\`\`bash
          helm install my-release \\
            oci://${REGISTRY}/${{ github.repository_owner }}/${{ steps.chart.outputs.name }} \\
            --version ${{ steps.chart.outputs.version }}
          \`\`\`

          ### Install latest version
          \`\`\`bash
          helm install my-release \\
            oci://${REGISTRY}/${{ github.repository_owner }}/${{ steps.chart.outputs.name }} \\
            --version latest
          \`\`\`
          EOF
