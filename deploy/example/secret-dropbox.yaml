---
# Dropbox Storage Class
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: rclone-dropbox
provisioner: rclone.csi.veloxpack.io
parameters:
  remote: "dropbox"
  remotePath: "/my-dropbox-folder"
csi.storage.k8s.io/node-publish-secret-name: "rclone-dropbox-secret"
csi.storage.k8s.io/node-publish-secret-namespace: "default"
reclaimPolicy: Delete
volumeBindingMode: Immediate
allowVolumeExpansion: true
---
# Dropbox OAuth Token Secret
apiVersion: v1
kind: Secret
metadata:
  name: rclone-dropbox-secret
  namespace: default
type: Opaque
stringData:
  remote: "dropbox"
  remotePath: "/my-dropbox-folder"
  configData: |
    [dropbox]
    type = dropbox
    token = {"access_token":"sl.B1234567890abcdef...","token_type":"bearer","expiry":"2024-01-01T00:00:00Z"}
    # Alternative: Use app key and secret
    # app_key = your_app_key
    # app_secret = your_app_secret
    # token = {"access_token":"sl.B1234567890abcdef...","token_type":"bearer","expiry":"2024-01-01T00:00:00Z"}
---
# Example PVC using Dropbox storage
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pvc-dropbox-example
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 10Gi
  storageClassName: rclone-dropbox
---
# Example Pod using Dropbox storage
apiVersion: v1
kind: Pod
metadata:
  name: nginx-dropbox-example
spec:
  containers:
  - name: nginx
    image: nginx
    ports:
    - containerPort: 80
    volumeMounts:
    - name: dropbox-storage
      mountPath: /usr/share/nginx/html
  volumes:
  - name: dropbox-storage
    persistentVolumeClaim:
      claimName: pvc-dropbox-example
